import numpy as np
import os
import sys
import inspect

filename = inspect.getframeinfo(inspect.currentframe()).filename
current_dir = os.path.dirname(os.path.abspath(filename))

ind = current_dir.find('metis')
metis_dir = current_dir[0:ind+5]
sys.path.append(metis_dir)

from conjunction import conjunction_analysis as ca



###############################################################################
#
# 2D Probability of Collision Tests
#
###############################################################################


# NASA CARA MATLAB Basic Examples/Validation Cases
def unit_test_Pc2D_Foster_basic():
    
#   Examples/Validation Cases:
#
#    Case 1:
#    r1      = [378.39559 4305.721887 5752.767554];
#    v1      = [2.360800244 5.580331936 -4.322349039];
#    r2      = [374.5180598 4307.560983 5751.130418];
#    v2      = [-5.388125081 -3.946827739 3.322820358];
#    cov1    = [44.5757544811362  81.6751751052616  -67.8687662707124;
#               81.6751751052616  158.453402956163  -128.616921644857;
#               -67.8687662707124 -128.616921644858 105.490542562701];
#    cov2    = [2.31067077720423  1.69905293875632  -1.4170164577661;
#               1.69905293875632  1.24957388457206  -1.04174164279599;
#               -1.4170164577661  -1.04174164279599 0.869260558223714];
#    HBR     = 0.020;
#    Tol     = 1e-09;
#    HBRType = 'circle';
#    [Pc]    = Pc2D_Foster(r1,v1,cov1,r2,v2,cov2,HBR,Tol,HBRType)
#    Pc      = 2.7060234765697e-05
  
#    Case 2:
#    r1      = [378.39559 4305.721887 5752.767554];
#    v1      = [2.360800244 5.580331936 -4.322349039];
#    r2      = [374.5180598 4307.560983 5751.130418];
#    v2      = [-5.388125081 -3.946827739 3.322820358];
#    cov1    = [44.5757544811362  81.6751751052616  -67.8687662707124;
#               81.6751751052616  158.453402956163  -128.616921644857;
#               -67.8687662707124 -128.616921644858 105.490542562701];
#    cov2    = [2.31067077720423  1.69905293875632  -1.4170164577661;
#               1.69905293875632  1.24957388457206  -1.04174164279599;
#               -1.4170164577661  -1.04174164279599 0.869260558223714];
#    HBR     = 0.020;
#    Tol     = 1e-09;
#    HBRType = 'square';
#    [Pc]    = Pc2D_Foster(r1,v1,cov1,r2,v2,cov2,HBR,Tol,HBRType)
#    Pc      = 3.4453464970356e-05
 
#    Case 3:
#    r1      = [378.39559 4305.721887 5752.767554];
#    v1      = [2.360800244 5.580331936 -4.322349039];
#    r2      = [374.5180598 4307.560983 5751.130418];
#    v2      = [-5.388125081 -3.946827739 3.322820358];
#    cov1    = [44.5757544811362  81.6751751052616  -67.8687662707124;
#               81.6751751052616  158.453402956163  -128.616921644857;
#               -67.8687662707124 -128.616921644858 105.490542562701];
#    cov2    = [2.31067077720423  1.69905293875632  -1.4170164577661;
#               1.69905293875632  1.24957388457206  -1.04174164279599;
#               -1.4170164577661  -1.04174164279599 0.869260558223714];
#    HBR     = 0.020;
#    Tol     = 1e-09;
#    HBRType = 'squareEquArea';
#    [Pc]    = Pc2D_Foster(r1,v1,cov1,r2,v2,cov2,HBR,Tol,HBRType)
#    Pc      = 2.70601573490093e-05
    
    # 
    
    
    X1 = np.reshape([378.39559, 4305.721887, 5752.767554, 2.360800244, 5.580331936, -4.322349039], (6,1))
    X2 = np.reshape([374.5180598, 4307.560983, 5751.130418, -5.388125081, -3.946827739, 3.322820358], (6,1))
    P1 = np.zeros((6,6))
    P2 = np.zeros((6,6))
    P1[0:3,0:3] = np.array([[44.5757544811362,  81.6751751052616,  -67.8687662707124],
                            [81.6751751052616,  158.453402956163,  -128.616921644857],
                            [-67.8687662707124, -128.616921644858, 105.490542562701]])
    
    P2[0:3,0:3] = np.array([[2.31067077720423,  1.69905293875632,  -1.4170164577661],
                            [1.69905293875632,  1.24957388457206,  -1.04174164279599],
                            [-1.4170164577661,  -1.04174164279599, 0.869260558223714]])
    
    HBR = 0.020
    tol = 1e-9
    
    
    # Circle
    HBR_type = 'circle'    
    Pc = ca.Pc2D_Foster(X1, P1, X2, P2, HBR, rtol=tol, HBR_type=HBR_type)    
    print(HBR_type, Pc, 2.7060234765697e-05)
    
    # Square
    HBR_type = 'square'    
    Pc = ca.Pc2D_Foster(X1, P1, X2, P2, HBR, rtol=tol, HBR_type=HBR_type)    
    print(HBR_type, Pc, 3.4453464970356e-05)
    
    # Square equivalent to the area of the circle
    HBR_type = 'squareEqArea'    
    Pc = ca.Pc2D_Foster(X1, P1, X2, P2, HBR, rtol=tol, HBR_type=HBR_type)    
    print(HBR_type, Pc, 2.70601573490093e-05)
    
    
    
    
    
    return



if __name__ == '__main__':
    
    unit_test_Pc2D_Foster_basic()



